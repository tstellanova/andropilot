// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : VehicleFSM.sm


//
// Copyright (c) 2013 Kevin Hester
// All rights reserved.
//


package com.geeksville.flight


class VehicleFSM(owner: VehicleModel) extends statemap.FSMContext[VehicleModelState] {

    private val _owner: VehicleModel = owner

    setState(VehicleFSM.WantInterface)

    def HBSaysArmed(): Unit = {
        _transition = "HBSaysArmed"
        getState().HBSaysArmed(this)
        _transition = ""
    }

    def HBSaysDisarmed(): Unit = {
        _transition = "HBSaysDisarmed"
        getState().HBSaysDisarmed(this)
        _transition = ""
    }

    def HBSaysFlying(): Unit = {
        _transition = "HBSaysFlying"
        getState().HBSaysFlying(this)
        _transition = ""
    }

    def OnHasHeartbeat(): Unit = {
        _transition = "OnHasHeartbeat"
        getState().OnHasHeartbeat(this)
        _transition = ""
    }

    def OnHasInterface(): Unit = {
        _transition = "OnHasInterface"
        getState().OnHasInterface(this)
        _transition = ""
    }

    def OnLostHeartbeat(): Unit = {
        _transition = "OnLostHeartbeat"
        getState().OnLostHeartbeat(this)
        _transition = ""
    }

    def OnLostInterface(): Unit = {
        _transition = "OnLostInterface"
        getState().OnLostInterface(this)
        _transition = ""
    }

    def OnParametersDownloaded(): Unit = {
        _transition = "OnParametersDownloaded"
        getState().OnParametersDownloaded(this)
        _transition = ""
    }

    def OnWaypointsDownloaded(): Unit = {
        _transition = "OnWaypointsDownloaded"
        getState().OnWaypointsDownloaded(this)
        _transition = ""
    }

    override def enterStartState(): Unit = {
        getState().Entry(this)
    }

    def getOwner(): VehicleModel = _owner

}

class VehicleModelState(name: String, id: Int) {
    private val _name = name
    private val _id = id

    def getName(): String = _name

    override def toString(): String = _name

    def Entry(context: VehicleFSM): Unit = {}
    def Exit(context: VehicleFSM): Unit = {}

    def HBSaysArmed(context: VehicleFSM): Unit = {
        Default(context)
    }

    def HBSaysDisarmed(context: VehicleFSM): Unit = {
        Default(context)
    }

    def HBSaysFlying(context: VehicleFSM): Unit = {
        Default(context)
    }

    def OnHasHeartbeat(context: VehicleFSM): Unit = {
        Default(context)
    }

    def OnHasInterface(context: VehicleFSM): Unit = {
        Default(context)
    }

    def OnLostHeartbeat(context: VehicleFSM): Unit = {
        Default(context)
    }

    def OnLostInterface(context: VehicleFSM): Unit = {
        Default(context)
    }

    def OnParametersDownloaded(context: VehicleFSM): Unit = {
        Default(context)
    }

    def OnWaypointsDownloaded(context: VehicleFSM): Unit = {
        Default(context)
    }

    def Default(context: VehicleFSM): Unit = {
        throw new statemap.TransitionUndefinedException(
                "State: " + context.getState()._name +
                ", Transition: " + context.getTransition())
    }

}

private class VehicleFSM_Default(name: String, id: Int) extends VehicleModelState(name, id) {

    override def OnLostHeartbeat(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.WantVehicle)
        context.getState().Entry(context)
    }

    override def OnLostInterface(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.WantInterface)
        context.getState().Entry(context)
    }

    override def OnWaypointsDownloaded(context: VehicleFSM): Unit = {

    }

    override def Default(context: VehicleFSM): Unit = {
        val ctxt: VehicleModel = context.getOwner()

        val endState = context.getState()

        context.clearState()
        try {
            ctxt.onUndefinedTransition(endState)
        }
        finally {
            context.setState(endState)
        }
    }
}

private class VehicleFSM_WantInterface(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def HBSaysArmed(context: VehicleFSM): Unit = {

    }

    override def OnHasHeartbeat(context: VehicleFSM): Unit = {

    }

    override def OnHasInterface(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.WantVehicle)
        context.getState().Entry(context)
    }

    override def OnLostHeartbeat(context: VehicleFSM): Unit = {

    }

    override def OnParametersDownloaded(context: VehicleFSM): Unit = {

    }
}

private class VehicleFSM_WantVehicle(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def OnHasHeartbeat(context: VehicleFSM): Unit = {
        val ctxt: VehicleModel = context.getOwner()

        if ( !ctxt.listenOnly ) {

            context.getState().Exit(context)
            // No actions.
            context.setState(VehicleFSM.DownloadingWaypoints)
            context.getState().Entry(context)
        }
        else if ( ctxt.listenOnly ) {

            context.getState().Exit(context)
            // No actions.
            context.setState(VehicleFSM.DownloadedParameters)
            context.getState().Entry(context)
        }        else {
            super.OnHasHeartbeat(context)
        }

    }

    override def OnParametersDownloaded(context: VehicleFSM): Unit = {

    }
}

private class VehicleFSM_DownloadingWaypoints(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def HBSaysArmed(context: VehicleFSM): Unit = {

    }

    override def HBSaysDisarmed(context: VehicleFSM): Unit = {

    }

    override def HBSaysFlying(context: VehicleFSM): Unit = {

    }

    override def OnWaypointsDownloaded(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.DownloadingParameters)
        context.getState().Entry(context)
    }
}

private class VehicleFSM_DownloadingParameters(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def HBSaysArmed(context: VehicleFSM): Unit = {

    }

    override def HBSaysDisarmed(context: VehicleFSM): Unit = {

    }

    override def HBSaysFlying(context: VehicleFSM): Unit = {

    }

    override def OnParametersDownloaded(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.DownloadedParameters)
        context.getState().Entry(context)
    }
}

private class VehicleFSM_DownloadedParameters(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def Entry (context: VehicleFSM): Unit = {
        val ctxt = context.getOwner()

        ctxt.handleStartupComplete()
    }

    override def HBSaysArmed(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Armed)
        context.getState().Entry(context)
    }

    override def HBSaysDisarmed(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Disarmed)
        context.getState().Entry(context)
    }

    override def HBSaysFlying(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Flying)
        context.getState().Entry(context)
    }
}

private class VehicleFSM_Disarmed(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def HBSaysArmed(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Armed)
        context.getState().Entry(context)
    }

    override def HBSaysFlying(context: VehicleFSM): Unit = {

    }
}

private class VehicleFSM_Armed(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def HBSaysDisarmed(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Disarmed)
        context.getState().Entry(context)
    }

    override def HBSaysFlying(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Flying)
        context.getState().Entry(context)
    }
}

private class VehicleFSM_Flying(name: String, id: Int) extends VehicleFSM_Default(name, id) {

    override def HBSaysArmed(context: VehicleFSM): Unit = {

    }

    override def HBSaysDisarmed(context: VehicleFSM): Unit = {

        context.getState().Exit(context)
        context.setState(VehicleFSM.Disarmed)
        context.getState().Entry(context)
    }

    override def HBSaysFlying(context: VehicleFSM): Unit = {

    }
}

private object VehicleFSM {
    val WantInterface = new VehicleFSM_WantInterface("VehicleFSM.WantInterface", 0)
    val WantVehicle = new VehicleFSM_WantVehicle("VehicleFSM.WantVehicle", 1)
    val DownloadingWaypoints = new VehicleFSM_DownloadingWaypoints("VehicleFSM.DownloadingWaypoints", 2)
    val DownloadingParameters = new VehicleFSM_DownloadingParameters("VehicleFSM.DownloadingParameters", 3)
    val DownloadedParameters = new VehicleFSM_DownloadedParameters("VehicleFSM.DownloadedParameters", 4)
    val Disarmed = new VehicleFSM_Disarmed("VehicleFSM.Disarmed", 5)
    val Armed = new VehicleFSM_Armed("VehicleFSM.Armed", 6)
    val Flying = new VehicleFSM_Flying("VehicleFSM.Flying", 7)
    val Default = new VehicleFSM_Default("VehicleFSM.Default", -1)
}

